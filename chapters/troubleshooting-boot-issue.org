* How to troubleshooting boot issues

Sometimes, you will face the following problems:

- Make a mistake to the important configuration file (e.g. =/etc/rc.conf=) to cause the system can't boot

- Boot process hangs, no response

Then, you need to know how to deal with the =boot loader= to debug and solve the problem.

** Bootloader

This is the normal =boot loader= prompt:

#+BEGIN_SRC bash
  # disks: hd0* hd1
  disks: sd0* sd1
  >> OpenBSD/arm64 BOOTAA64 1.18
  boot>
#+END_SRC

You can type commands before the default timeout ends.

***  Print the supported commands

#+BEGIN_SRC bash
  boot> help
  commands: # boot echo enu help hexdump ls machine reboot set stty time
  machine: acpi dtb exit poweroff
#+END_SRC

That said you have 2 set of commands:

- The common commands: =boot echo enu help hexdump ls machine reboot set stty time=

- The machine specific commands: =machine [acpi | dtb | exit | poweroff]=


***  About the disks

For the disk info line: =disks: sd0* sd1=

That said you have 2 disks and the first one =sd0= is the current booting disk that includes the installed =OpenBSD=.

You can run =ls= to list disk content like you're in a normal shell, if you want to change disk, you need to run =set device= to change operate disk. For example:

#+BEGIN_SRC bash
  set device sd1
#+END_SRC

So, the upcoming commands (e.g. =ls=) are targeted on that disk!!!


***  Use the specified kernel to boot

You're able to select a different kernel to boot, here are the supported kernels you're able to boot:

| Kernel filename | Description                                |
|-----------------+--------------------------------------------|
| =bsd=             | kernel image (for multiprocessor machines) |
| =/bsd.sp=         | kernel image for single processor machines |
| =/bsd.mp=         | kernel image for multiprocessor machines   |
| =/bsd.rd=         | kernel image for installation/recovery     |


For example, if the normal boot process fails, you can't boot into your =OpenBSD=, then you can try to boot into the =RamDisk= and try to do a fix:

#+BEGIN_SRC bash
  boot> boot sd0a:/bsd.rd
#+END_SRC

That's saying: Boot the =/bsd.rd= (kernel) from partition =a= of the first disk!!!


***  Boot into single user mode

If you make a mistake to the important configuration file (e.g. =/etc/rc.conf=) to cause the system can't boot, or you forgot the =root= password, then you should boot into =single user= mode to do a fix:

#+BEGIN_SRC bash
  boot> boot -s
#+END_SRC


***  Boot configuration customization

If you think the boot process seems to fail on the particular modules or drivers, then you should do some boot config settings before the boot process kick-off.

#+BEGIN_SRC bash
  boot> boot -c
  UKC>
#+END_SRC

The =UKC>= prompt means you can run the supported configure commands before the normal boot.

For example, you can =disable= some drivers to be loaded:

#+BEGIN_SRC bash
  ukc> disable uhidev
  # 310 uhidev* disabled

  ukc> disable uhub
  # 301 uhub* disabled
  # 302 uhub* disabled

  #
  # Disable Intel DRM
  #
  ukc> disable inteldrm

  #
  # Disable the following `acpi` related, but you can't disable `acpi`,
  # as on modern machines, it's all but required. The controller for
  # your hard drive didn't attach, so the kernel was unable to find
  # your root device!!!
  #
  ukc> disable acpivideo
  ukc> disable acpibtn
  ukc> disable acpiac
  ukc> disable acpibat
  ukc> disable acpihid
  ukc> disable acpipwrres
  ukc> disable acpicpu

  #
  # Run `quit` to save and exit `config`
  #
  ukc> quit

  #
  # Now, boot the default kernel
  #
  boot> boot sd0a:/bsd
#+END_SRC


***  Boot configuration customization in another way

#+BEGIN_SRC bash
  boot> boot -c
  UKC>
#+END_SRC

Sometimes, you can't type at this stage if you're using some special mechanical keyboards (as the keyboard driver didn't load at that moment).

For example, here is my case when using =Varmilo= keyboard or =OpenBSD= vm in =Parallel Desktop=:

- [[https://drive.google.com/file/d/1Iq2skUDZFMYqYKYJGiAhVm7EAu0VRX7d/view?usp=sharing][video recording]]

- [[https://ibb.co/QchqhtY][Another screenshot]]


So, for those cases, you have to boot into =/bsd.rs= and run the =shell= to mount your OpenBSD partitions to do a fix:

#+BEGIN_SRC conf
  boot> boot sd0a:/bsd.rs

  Welcome to the OpenBSD/arm64 7.5 installation program.
  (I)nstall, (Upgrade, (A)utoinstall or (5)hell? 5
  #
#+END_SRC


If the =boot> boot sd0a:/bsd.rs= failed, then you have to plugin the installer USB and boot into the =installer USB's /bsd.rd=!!!


Now, you're run the following commands to try to do a fix:

****  List OpenBSD disk

#+BEGIN_SRC bash
  sysctl hu. disknames
  # hw.disknames=sd0: e44d0d9d0890f6b?,cd0:,rd0: bceeec6095a56dd3
#+END_SRC


**** Create device special files

If you have more than one disk listed (e.g. =sd0, sd1=), then you need to confirm which disk is the =OpenBSD= one, you have to run =fdisk sd0= and =fdisk sd1= to print the SSD partition tables.

Before using =fdisk sd0=, you must create the device file, as =/dev/sd0= and =/dev/sd1= don't exist in shell mode yet.

Here is the way to create them:

#+BEGIN_SRC bash
  cd /dev
  sh MAKEDEV sd0
  sh MAKEDEV sd1
#+END_SRC

After that, =/dev/sd0= and =/dev/sd1= will be available.

So, here is the output of =fdisk sd0= for =UEFI, GPT= pattern:

#+BEGIN_SRC bash
  fdisk sd0

  # Disk: sd0
  # #: type
  # -------------------------------------------
  # 0: EFI Sys
  # 1: OpenBSD
#+END_SRC

So, here is the output of =fdisk sd0= for =MRB= pattern:

#+BEGIN_SRC bash
  fdisk sd0

  # Disk: sd0
  #  #: id
  # -------------------------------------------
  # *0: 0C ..... Win95 FAT32L
  #  1: 00 ..... Unused
  #  2: 00 ..... Unused
  #  3: A6 ..... OpenBSD
#+END_SRC

That means =sd0= is the =OpenBSD= SSD.


**** Mount the =/= partition and =/usr= partition

Now, you need to mount the related partitions before running =config -ef /bsd= to change the boot config.

You can run =disklabel -p G sd0= to print out all partitions (=-p G= means use =GB= as size unit).

Here is my =OpenBSD= partitions:

#+BEGIN_SRC bash
  a:              1.G               64   4.2BSD   2048 16384     1 # /
  b:            64.0G          2097216    swap
  c:           921.5G                0  unused
  d:             4.0G        XXXXXXXXX  4.2BSD   2048 16384     1 # /tmp
  e:           119.8G        XXXXXXXXX  4.2BSD   2048 16384     1 # /var
  f:              30G        XXXXXXXXX  4.2BSD   2048 16384     1 # /usr
  g:             1.0G        XXXXXXXXX  4.2BSD   2048 16384     1 # /usr/X11R6
  h:            20.0G        XXXXXXXXX  4.2BSD   2048 16384     1 # /usr/local
  i:             0.3G               64  MSDOS
  j:             3.0G        XXXXXXXXX  4.2BSD   2048 16384     1 # /usr/src
  k:             6.0G        XXXXXXXXX  4.2BSD   2048 16384     1 # /usr/obj
  l:           300.0G        XXXXXXXXX  4.2BSD   2048 16384     1 # /home
#+END_SRC

That's why I mount them like this:

#+BEGIN_SRC bash
  #
  # Root
  #
  mount /dev/sd0a /mnt

  #
  # You need this partition to run the binaries
  # that are stored in `/usr/bin`
  #
  mount /dev/sd0f /mnt/usr

  #
  # You need those partitions to run `config -ef /bsd`
  #
  mount /dev/sd0d /mnt/tmp
  mount /dev/sd0e /mnt/var
#+END_SRC


After that, run =mount= to confirm all partitions have been mounted correctly:

#+BEGIN_SRC bash
  mount

  # /dev/rd0a on / types ffs (Local)
  # /dev/sd1a on /mnt types ffs (Local)
  # /dev/sd1f on /mnt/usr types ffs (Local)
  # /dev/sd1d on /mnt/tmp types ffs (Local)
  # /dev/sd1e on /mnt/var types ffs (Local)
#+END_SRC


**** =chroot= into =/mnt=

#+BEGIN_SRC bash
  chroot /mnt

  #
  # Run `uname -a` to confirm that I'm in the installed OpenBSD!!!
  #
  /usr/bin/uname -a
  OpenBSD 7.5 RAMDISK_CD+76 amd64
#+END_SRC


**** Change boot configuration

The kernel configuration file to overwrite

#+BEGIN_SRC bash
  ls -lht /bsd

  #-rwx------ 1 root wheel 25.3M /bsd
#+END_SRC


#+BEGIN_SRC bash
  #
  # -e: Allows the modification of kernel device configuration
  # -f: Overwrite the infile kernel binary with the modified kernel
  #
  config -ef /bsd

  ukc>
#+END_SRC

In that =ukc>= prompt, you're able to run all commands that available in the =boot -c=, here is the man page: https://man.openbsd.org/boot_config.8


Now, you can do something like below as an example when needed:

#+BEGIN_SRC bash
  ukc> disable uhidev
  # 310 uhidev* disabled

  ukc> disable uhub
  # 301 uhub* disabled
  # 302 uhub* disabled

  #
  # After this, `efifb0 at mainbus0: 3840x2160, 32bpp` comes back
  #
  ukc> disable inteldrm

  #
  # Disable the following `acpi` related, but you can't disable `acpi`,
  # as on modern machines, it's all but required. The controller for
  # your hard drive didn't attach, so the kernel was unable to find
  # your root device!!!
  #
  ukc> disable acpivideo
  ukc> disable acpibtn
  ukc> disable acpiac
  ukc> disable acpibat
  ukc> disable acpihid
  ukc> disable acpipwrres
  ukc> disable acpicpu

  #
  # Run `quit` to save and exit `config`
  #
  ukc> quit
#+END_SRC


**** Exit and reboot

#+BEGIN_SRC bash
  #
  # Exit `chroot`
  #
  exit

  #
  # Sync all changes to disk
  #
  sync

  #
  # Umount all partitions
  #
  umount /mnt/tmp
  umount /mnt/var
  umount /mnt/usr
  umount /mnt
#+END_SRC


Then, reboot.


** My =TH80= boot issue

My =TH80= can't boot after fresh installation, it hangs on the following output message:

#+BEGIN_SRC bash
  efifb at mainbus0 not configured
  uhidev0 at uhub0 port 3 configuration 1 interface 0 "AONE Varmilo Keyboard"... addr 2 
  uhidev0: iclass 3/1
  ukbd0 at uhidev0: 8 variable keys, 5 key codes
#+END_SRC


Then I tried to boot manually below and failed:

#+BEGIN_SRC bash
  > boot hd1a:/bsd.rd
  openbsd cannot open hd1a:/etc/random.seed: Invalid argument
  booting hd0a:/bsd: open hd0a:/bsd: Invalid argument
  failed(22). will try /bsd
#+END_SRC

Then I tried to boot in configuration mode:

#+BEGIN_SRC bash

  > boot -c
  UKC>
#+END_SRC

But my keyboard doesn't work in that situation, it can't type! It should be the case that the keyboard driver hasn't been loaded yet at =boot -c= step.

So, how to solve that???

*** Boot in USB installer and change =OpenBSD= boot config

When booting by the USB install image, all keyboard drivers work perfectly.

After booting into the installer, press =s= to go into =shell= mode!!!

**** Create device special files

Because I want to confirm which SSD is the =OpenBSD= one, I have to run =fdisk sd0= and =fdisk sd1= to print the SSD partition tables.

Before using =fdisk sd0=, you must create the device file, as =/dev/sd0= and =/dev/sd1= don't exist in shell mode yet.

Here is the way to create them:

#+BEGIN_SRC bash
  cd /dev
  sh MAKEDEV sd0
  sh MAKEDEV sd1
#+END_SRC

After that, =/dev/sd0= and =/dev/sd1= will be available.

So, here is the output of =fdisk sd1=:

#+BEGIN_SRC bash
  fdisk sd1

  # Disk: sd1
  # #: type
  # -------------------------------------------
  # 0: EFI Sys
  # 1: OpenBSD
#+END_SRC

That means =sd1= is the =OpenBSD= SSD.


**** Mount the =/= partition and =/usr= partition

Now, I  need to mount the related partitions before running =config -ef /bsd= to change the boot config.

Here is my =OpenBSD= partitions:

#+BEGIN_SRC bash
  a:              1.G               64   4.2BSD   2048 16384     1 # /
  b:            64.0G          2097216    swap
  c:           921.5G                0  unused
  d:             4.0G        XXXXXXXXX  4.2BSD   2048 16384     1 # /tmp
  e:           119.8G        XXXXXXXXX  4.2BSD   2048 16384     1 # /var
  f:              30G        XXXXXXXXX  4.2BSD   2048 16384     1 # /usr
  g:             1.0G        XXXXXXXXX  4.2BSD   2048 16384     1 # /usr/X11R6
  h:            20.0G        XXXXXXXXX  4.2BSD   2048 16384     1 # /usr/local
  i:             0.3G               64  MSDOS
  j:             3.0G        XXXXXXXXX  4.2BSD   2048 16384     1 # /usr/src
  k:             6.0G        XXXXXXXXX  4.2BSD   2048 16384     1 # /usr/obj
  l:           300.0G        XXXXXXXXX  4.2BSD   2048 16384     1 # /home
#+END_SRC

That's why I mount them like this:

#+BEGIN_SRC bash
  #
  # Root
  #
  mount /dev/sd1a /mnt

  #
  # You need this partition to run the binaries
  # that are stored in `/usr/bin`
  #
  mount /dev/sd1f /mnt/usr

  #
  # You need those partitions to run `config -ef /bsd`
  #
  mount /dev/sd1d /mnt/tmp
  mount /dev/sd1e /mnt/var
#+END_SRC


After that, run =mount= to confirm all partitions have been mounted correctly:

#+BEGIN_SRC bash
  mount

  # /dev/rd0a on / types ffs (Local)
  # /dev/sd1a on /mnt types ffs (Local)
  # /dev/sd1f on /mnt/usr types ffs (Local)
  # /dev/sd1d on /mnt/tmp types ffs (Local)
  # /dev/sd1e on /mnt/var types ffs (Local)
#+END_SRC


**** =chroot= into =/mnt=

#+BEGIN_SRC bash
  chroot /mnt

  #
  # Run `uname -a` to confirm that I'm in the installed OpenBSD!!!
  #
  /usr/bin/uname -a
  OpenBSD 7.5 RAMDISK_CD+76 amd64
#+END_SRC


**** Change boot configuration

The kernel configuration file to overwrite

#+BEGIN_SRC bash
  ls -lht /bsd

  #-rwx------ 1 root wheel 25.3M /bsd
#+END_SRC


#+BEGIN_SRC bash
  #
  # -e: Allows the modification of kernel device configuration
  # -f: Overwrite the infile kernel binary with the modified kernel
  #
  config -ef /bsd

  ukc>
#+END_SRC

In that =ukc>= prompt, you're able to run all commands that available in the =boot -c=, here is the man page: https://man.openbsd.org/boot_config.8

For my case, I need to disable the =uhidev= driver

#+BEGIN_SRC bash
  ukc> disable uhidev
  # 310 uhidev* disabled

  ukc> disable uhub
  # 301 uhub* disabled
  # 302 uhub* disabled

  #
  # After this, `efifb0 at mainbus0: 3840x2160, 32bpp` comes back
  #
  ukc> disable inteldrm

  #
  # Disable the following `acpi` related, but you can't disable `acpi`,
  # as on modern machines, it's all but required. The controller for
  # your hard drive didn't attach, so the kernel was unable to find
  # your root device!!!
  #
  ukc> disable acpivideo
  ukc> disable acpibtn
  ukc> disable acpiac
  ukc> disable acpibat
  ukc> disable acpihid
  ukc> disable acpipwrres
  ukc> disable acpicpu

  #
  # Run `quit` to save and exit `config`
  #
  ukc> quit

  #
  # Now, boot the default kernel
  #
  boot> boot sd0a:/bsd
#+END_SRC


**** Exit and reboot


#+BEGIN_SRC bash
  #
  # Exit `chroot`
  #
  exit

  #
  # Sync all changes to disk
  #
  sync

  #
  # Umount all partitions
  #
  umount /mnt/tmp
  umount /mnt/var
  umount /mnt/usr
  umount /mnt
#+END_SRC


Then, reboot and remove the USB installer.




*** Still no luck with running OpenBSD on =TH80=

After disabling all the above drivers/modules, the boot process still hangs on the following lines:

#+BEGIN_SRC bash
  efifb0 at mainbus0: 3840x2160, 32bpp
  wsdisplay0 at efifb0 mux 1: console (std, vt100 emulation), using wskbd0
  wsdisplay0: screen 1-5 added (std, vt100 emulation)
  ugen0 at uhub0 port 14 "Intel Bluetooth" rev 2.01/0.00 addr 2
  vscsi0 at root
  scsibus2 at vscsi0: 256 targets
  softraid0 at root
  scsibus3 at softraid0: 256 targets
  root on sd0a (210073f02338a2ec.a) swap on sd0b dump on sd0b
#+END_SRC


** How to use =vi= in installer shell

If you run =vi= in installer shell, you will see the following error:

#+BEGIN_SRC bash
  vi: unknown: unknown terminal type 
#+END_SRC


Here is how to fix it:

#+BEGIN_SRC bash
  TERM=vt100
  export TERM
#+END_SRC


Now, =vi= should work with no problem.
